/*Developed by M V Subrahmanyam - https://www.linkedin.com/in/veera-subrahmanyam-mediboina-b63997145/
Project: AWS | NodeMCU ESP32 Tutorials
Electronics Innovation - www.electronicsinnovation.com
GitHub - https://github.com/VeeruSubbuAmi
YouTube - http://bit.ly/Electronics_Innovation
Upload date: 07 October 2019
AWS Iot Core
This example needs https://github.com/esp8266/arduino-esp8266fs-plugin

Developed by Rui Santos
Complete project details at https://RandomNerdTutorials.com/esp32-mqtt-publish-dht11-dht22-arduino/

Adaptado por Joanne Caroline, para o desenvolvimento de uma placa coletora de dados utilizando sensores LDR, DHT11
*/

#include "FS.h"
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <NTPClient.h>
#include <WiFiUdp.h>

// Inclui bibliotecas do DHT
#include "Adafruit_Sensor.h"
#include "DHT.h"

// Inclui biblitecas de comunicação
#include "AsyncMqttClient.h"
#include "Ticker.h"


// Update these with values suitable for your network.

const char* ssid = "xxxxx"; //inserir nome da rede doméstica
const char* password = "xxxxx"; //inserir senha da rede doméstica


// Configurações DHT
#define DHTTYPE DHT11     // Define o modelo DHT 11, DHT21, DHT22
#define DHTPIN D1         // Define o pino de conexão do sensor no ESP32
DHT dht(DHTPIN, DHTTYPE); // DHT (pino,tipo)
#define LDR A0            // Define o pino do LDR

// Define os nomes variáveis do sensor DHT para o MQQT broker
#define MQTT_PUB_TEMP "esp8266/dht/temperature"
#define MQTT_PUB_HUM  "esp8266/dht/humidity"
#define MQTT_PUB_LUM  "esp8266/ldr"


// Define as variáveis para temperatura e umidade
float temp;
float hum;

// Variavel de armazenamento do LDR inicializada a 0
int sensorValor = 0; 



// Variáveis para registrar o intervalo de repetição de leitura
unsigned long previousMillis = 0;   
const long interval = 5000;   

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org");

const char* AWS_endpoint = "ak7gj8vyyroaf-ats.iot.us-east-1.amazonaws.com"; //MQTT broker ip

void callback(char* topic, byte* payload, unsigned int length) {
Serial.print("Message arrived [");
Serial.print(topic);
Serial.print("] ");
for (int i = 0; i < length; i++) {
Serial.print((char)payload[i]);
}
Serial.println();

}
WiFiClientSecure espClient;
PubSubClient client(AWS_endpoint, 8883, callback, espClient); //set MQTT port number to 8883 as per //standard
long lastMsg = 0;
char msg[50];
int value = 0;

void setup_wifi() {

delay(10);
// We start by connecting to a WiFi network
espClient.setBufferSizes(512, 512);
Serial.println();
Serial.print("Connecting to ");
Serial.println(ssid);

WiFi.begin(ssid, password);

while (WiFi.status() != WL_CONNECTED) {
delay(500);
Serial.print(".");
}

Serial.println("");
Serial.println("WiFi connected");
Serial.println("IP address: ");
Serial.println(WiFi.localIP());

timeClient.begin();
while(!timeClient.update()){
timeClient.forceUpdate();
}

espClient.setX509Time(timeClient.getEpochTime());

}

void reconnect() {
// Loop until we're reconnected
while (!client.connected()) {
Serial.print("Attempting MQTT connection...");
// Attempt to connect
if (client.connect("ESPthing")) {
Serial.println("connected");
// Once connected, publish an announcement...
client.publish("outTopic", "hello world");
// ... and resubscribe
client.subscribe("inTopic");
} else {
Serial.print("failed, rc=");
Serial.print(client.state());
Serial.println(" try again in 5 seconds");

char buf[256];
espClient.getLastSSLError(buf,256);
Serial.print("WiFiClientSecure SSL error: ");
Serial.println(buf);

// Wait 5 seconds before retrying
delay(5000);
}
}
}


void setup() {

Serial.begin(115200);
Serial.setDebugOutput(true);
// initialize digital pin LED_BUILTIN as an output.
pinMode(LED_BUILTIN, OUTPUT);
setup_wifi();
delay(1000);
if (!SPIFFS.begin()) {
Serial.println("Failed to mount file system");
return;
dht.begin();
}

Serial.print("Heap: "); Serial.println(ESP.getFreeHeap());

// Load certificate file
File cert = SPIFFS.open("/cert.der", "r"); //replace cert.crt eith your uploaded file name
if (!cert) {
Serial.println("Failed to open cert file");
}
else
Serial.println("Success to open cert file");

delay(1000);

if (espClient.loadCertificate(cert))
Serial.println("cert loaded");
else
Serial.println("cert not loaded");

// Load private key file
File private_key = SPIFFS.open("/private.der", "r"); //replace private eith your uploaded file name
if (!private_key) {
Serial.println("Failed to open private cert file");
}
else
Serial.println("Success to open private cert file");

delay(1000);

if (espClient.loadPrivateKey(private_key))
Serial.println("private key loaded");
else
Serial.println("private key not loaded");

// Load CA file
File ca = SPIFFS.open("/ca.der", "r"); //replace ca eith your uploaded file name
if (!ca) {
Serial.println("Failed to open ca ");
}
else
Serial.println("Success to open ca");

delay(1000);

if(espClient.loadCACert(ca))
Serial.println("ca loaded");
else
Serial.println("ca failed");

Serial.print("Heap: "); Serial.println(ESP.getFreeHeap());
}

void loop() {

if (!client.connected()) {
reconnect();
}
client.loop();

long now = millis();
if (now - lastMsg > 2000) {
lastMsg = now;
++value;
snprintf (msg, 75, "{\"message\": \"Realizando a leitura dos sensores #%ld\"}", value);
Serial.print("Publish message: ");
Serial.println(msg);
client.publish("outTopic", msg);
Serial.print("Heap: "); Serial.println(ESP.getFreeHeap()); //Low heap can cause problems
}
digitalWrite(LED_BUILTIN, HIGH); // turn the LED on (HIGH is the voltage level)
delay(100); // wait for a second
digitalWrite(LED_BUILTIN, LOW); // turn the LED off by making the voltage LOW
delay(100); // wait for a second

unsigned long currentMillis = millis();
  // A cada intervalo de tempo realiza a leitura do DHT
  if (currentMillis - previousMillis >= interval) {
    // Atualiza o valor de milisegundos anterior 
    previousMillis = currentMillis;
    // Realiza uma nova leitura do sensor de umidade
    hum = dht.readHumidity();
    // Realiza uma nova leitura do sensor de temperatura, em Celsius
    temp = dht.readTemperature();
    // Realiza uma nova leitura do sensor de temperatura, em Fahrenheit (isFahrenheit = true)
    //temp = dht.readTemperature(true);
    // Realiza uma nova leitura do sensor de luminosidade
    
}

int sensorValor = analogRead(A0);

Serial.print("Temperatura: ");
Serial.println(temp);
client.publish("MQTT_PUB_TEMP", String(temp).c_str());

Serial.print("Umidade: ");
Serial.println(hum);
client.publish("MQTT_PUB_HUM", String(hum).c_str());

Serial.print("Luminosidade: ");
Serial.println(sensorValor);
client.publish("MQTT_PUB_LUM", String(sensorValor).c_str());

}
